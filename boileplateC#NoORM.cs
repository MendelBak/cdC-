// THIS BOILERPLATE FILE IS FOR A PROJECT THAT DOES NOT IMPLEMENT USE OF AN ORM SUCH AS DAPPER OR ENTITY FRAMEWORK.

/************************ Commands *************************/
// To start a new console app, create a folder, enter it. then run:
dotnet new console
// To start a new web app, create a folder, enter it. then run:
dotnet new web
// To start a new web app with MVC, create a folder, enter it. then run:
dotnet new MVC
// To restore a folder to make dependencies run:
dotnet restore
// To run a C# app:
dotnet run
// If Microsoft.DotNet.Watcher.Tools is included in your ProjectName.csproj file (will watch for file changes and recompile automatically):
<DotNetCliToolReference Include="Microsoft.DotNet.Watcher.Tools" Version="2.0.0" />
dotnet watch run
// Set development environment variable for developer exception/error messages in your terminal:
SET ASPNETCORE_ENVIRONMENT=Development
// Install MySQL in your project
dotnet add package MySql.Data -v 8.0.11-*


// After you have created a new web app, create a few new directories and files following this scaffolding strategy //

// (root)
// .vscode (Autogenerated. Debugger files)
// > bin (Autogenerated)
// > Controllers (Create this directory)
//   > HomeController.cs
// > Models (Classes and database context files go here)
//   > DbContext.cs
//   > User.cs 
// > obj (Autogenerated)
// > Views (Create this directory)
//   > Home (Must match the controller name from above)
//     > index.cshtml
//   > Shared (This is the last place the compiler will look for views. It is for views that are shared between multiple controllers)
// > wwwroot (autogenerated. This contains your static files (images, css, js).)
//   > css (Create this directory)
//     > style.css
//   > img (Create this directory)
//     > img1.jpg
//   > js (Create this directory)
//     > script.js
// > appsettings.json (This is where you have your DB connection string. It is read by the DbConnection file. It is kept in this file in order to maintain security.)
// > Properties (Create this directory)
//   > MySqlOptions.cs (This contains a model for SQL options. Only create this if you need to access the SQL connection string in your other project in a place other than the appsettings.json file(which connects to the DB))


// END FILE STRUCTURE //

/************************ Configuring your files*************************/
// DONT FORGET TO CHANGE NAMESPACES, DB NAMES, AND PROJECT NAMES!

// Startup.cs (contains "Using" statements and is where you enable services like session, MVC, DbContext, and other tools.):

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

namespace theWall
{
    public class Startup
    {
        public Startup(IHostingEnvironment env)
        {
            var builder = new ConfigurationBuilder()
            .SetBasePath(env.ContentRootPath)
            .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
            .AddEnvironmentVariables();
            Configuration = builder.Build();
        }

        public IConfiguration Configuration { get; private set; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddSession();
            services.AddMvc();
            services.Configure<MySqlOptions>(Configuration.GetSection("DBInfo"));
            services.AddScoped<DbConnector>();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
        {
            if (env.IsDevelopment())
                app.UseDeveloperExceptionPage();
                loggerFactory.AddConsole();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
            }
            app.UseSession();
            app.UseStaticFiles();
            app.UseMvc();
        }
    }
}

// END Startup.cs

// Program.cs

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace theWall
{
    public class Program
    {
        public static void Main(string[] args)
        {
            BuildWebHost(args).Run();
        }

        public static IWebHost BuildWebHost(string[] args) =>
            WebHost.CreateDefaultBuilder(args)
                .UseStartup<Startup>()
                .Build();
    }
}


// END Program.cs

// myDirectoryName.csproj (contains intialization information, like the version of ASP.NET and other imported tools.)
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>netcoreapp2.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.6" />
    <PackageReference Include="MySql.Data" Version="8.0.11-*" />
  </ItemGroup>

  <ItemGroup>
    <DotNetCliToolReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Tools" Version="2.0.3" />
    <DotNetCliToolReference Include="Microsoft.DotNet.Watcher.Tools" Version="2.0.0" />
  </ItemGroup>

</Project>

// END myDirectoryName.csproj


// DbConnection.cs 
// This file contains DB connection query and execution actions. If you are using an ORM like Dapper or Entity you need to change this file entirely.

using System.Collections.Generic;
using System.Data;
using MySql.Data.MySqlClient;
using Microsoft.Extensions.Options;

namespace CHANGETOYOURNAMESPACE
{
    public class DbConnector
    {
        private readonly IOptions<MySqlOptions> MySqlConfig;

        public DbConnector(IOptions<MySqlOptions> config)
        {
            MySqlConfig = config;
        }
        internal IDbConnection Connection
        {
            get
            {
                return new MySqlConnection(MySqlConfig.Value.ConnectionString);
            }
        }

        //This method runs a query and stores the response in a list of dictionary records
        public List<Dictionary<string, object>> Query(string queryString)
        {
            using (IDbConnection dbConnection = Connection)
            {
                using (IDbCommand command = dbConnection.CreateCommand())
                {
                    command.CommandText = queryString;
                    dbConnection.Open();
                    var result = new List<Dictionary<string, object>>();
                    using (IDataReader rdr = command.ExecuteReader())
                    {
                        while (rdr.Read())
                        {
                            var dict = new Dictionary<string, object>();
                            for (int i = 0; i < rdr.FieldCount; i++)
                            {
                                dict.Add(rdr.GetName(i), rdr.GetValue(i));
                            }
                            result.Add(dict);
                        }
                        return result;
                    }
                }
            }
        }
        //This method run a query and returns no values
        public void Execute(string queryString)
        {
            using (IDbConnection dbConnection = Connection)
            {
                using (IDbCommand command = dbConnection.CreateCommand())
                {
                    command.CommandText = queryString;
                    dbConnection.Open();
                    command.ExecuteNonQuery();
                }
            }
        }
    }
}

// END DbConnection.json

// appsettings.json
// This file holds the Databse connection string with the port, password, and username, et cetera... Don't upload this file to Github for security reasons!

{
  "Logging": {
    "IncludeScopes": false,
    "LogLevel": {
      "Default": "Warning"
    }
  },  
    "DBInfo":
    {
        "Name": "MySQLconnect",
        "ConnectionString": "server=localhost;userid=root;password=root;port=3306;database=the_wall;SslMode=None"
    }
}

// End DbConnection.json


// MySQlOptions.cs (inside of the Proprties Folder which you need to create yourself).
// This file is part of the process for enabling your project to access the connection string, if you think that's necessary.

namespace CHANGETOYOURNAMESPACE
{
    public class MySqlOptions
    {
        public string Name { get; set; }
        public string ConnectionString { get; set; }
    }
}

// END MySqlOptions.cs


// User.cs (User model in the "Models" folder.)
// Model validations can be performed on the model itself or in the ViewModel.

using System;
using System.ComponentModel.DataAnnotations;

namespace CHANGETOYOURNAMESPACE.Models
{
    public abstract class BaseEntity {}

    public class User : BaseEntity
    {
        public int id { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
    }
}

// END User.cs


// RegisterViewModel.cs
// This View Model file allows you to perform validations.

using System;
using System.ComponentModel.DataAnnotations;

namespace theWall.Models
{
    public class RegisterViewModel : BaseEntity
    {
        [Required]
        public string Username { get; set; }

        [Required]
        [MinLength(8)]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [Required]
        [Compare("Password", ErrorMessage="Password must match")]
        public string ConfirmPassword { get; set; }
    }
}

// END RegisterViewModel.cs


// HomeController.cs
// This is where the main logic of your program is situated. The Routes, the Logic, the Rendering, et cetera.. 
// The name of your contoller (HomeController, for example, must match the directory for the view it will render.).

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using CHANGETOYOURNAMESPACE.Models;

namespace CHANGETOYOURNAMESPACE.Controllers
{
    public class HomeController : Controller
    {
        private readonly DbConnector _dbConnector;

        public HomeController(DbConnector connect)
        {
            _dbConnector = connect;
        }


        [HttpGet]
        [Route("")]
        public IActionResult Index()
        {
            return View();
        }
    }
}

// END HomeController.cs